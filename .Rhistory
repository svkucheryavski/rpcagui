X = scale(X, scale = F)
B = randperm(X, k = 2, p = p, dist = 'norm')
m = svdpca(B, 2)
mx = max(abs(B))
plot(X, col = '#f0f0f0', pch = 1, xlim = c(-1, 1)*mx, ylim = c(-1, 1)*mx, main = sprintf('s = %.1f, p = %d', s, p))
grid()
points(B, col = 'blue', pch = 16)
lines(c(-m[1, 1], m[1, 1])*10, c(-m[2, 1], m[2, 1])*10, col = 'blue', lty = 3)
lines(c(-m[1, 2], m[1, 2])*10, c(-m[2, 2], m[2, 2])*10, col = 'blue', lty = 3)
}
}
# points are scaled
par(mfrow = c(2, 4))
for (p in ps) {
for (s in ss) {
set.seed(42)
x = rnorm(n, 0, 2)
y = x + rnorm(n, 0, s)
set.seed(NULL)
X = cbind(x, y)
X = scale(X, scale = F)
mx = max(abs(X))
B = randperm(X, k = 2, p = p, dist = 'unif')
m = svdpca(B, 2)
mo = svdpca(X, 2)
show(m)
show(mo)
#B = apply(B, 2, function(x){ mx * x/sqrt(sum(x^2))})
plot(X, col = '#f0f0f0', pch = 1, xlim = c(-1, 1)*mx, ylim = c(-1, 1)*mx, main = sprintf('s = %.1f, p = %d', s, p))
grid()
points(B, col = 'blue', pch = 16)
lines(c(-mo[1, 1], mo[1, 1])*10, c(-mo[2, 1], mo[2, 1])*10, col = 'darkgray', lty = 1)
lines(c(-mo[1, 2], mo[1, 2])*10, c(-mo[2, 2], mo[2, 2])*10, col = 'darkgray', lty = 1)
lines(c(-m[1, 1], m[1, 1])*10, c(-m[2, 1], m[2, 1])*10, col = 'blue', lty = 3)
lines(c(-m[1, 2], m[1, 2])*10, c(-m[2, 2], m[2, 2])*10, col = 'blue', lty = 3)
}
}
# 1. Simulated data (Figure 1) ----
#set.seed(42)
ss = c(0.5, 1, 1.5, 2)
ps = c(0, 5)
n = 10000
# points are not scaled
par(mfrow = c(2, 4))
for (p in ps) {
for (s in ss) {
set.seed(42)
x = rnorm(n, 0, 2)
y = x + rnorm(n, 0, s)
set.seed(NULL)
X = cbind(x, y)
X = scale(X, scale = F)
B = randperm(X, k = 2, p = p, dist = 'norm')
m = svdpca(B, 2)
mx = max(abs(B))
plot(X, col = '#f0f0f0', pch = 1, xlim = c(-1, 1)*mx, ylim = c(-1, 1)*mx, main = sprintf('s = %.1f, p = %d', s, p))
grid()
points(B, col = 'blue', pch = 16)
lines(c(-m[1, 1], m[1, 1])*10, c(-m[2, 1], m[2, 1])*10, col = 'blue', lty = 3)
lines(c(-m[1, 2], m[1, 2])*10, c(-m[2, 2], m[2, 2])*10, col = 'blue', lty = 3)
}
}
# points are scaled
par(mfrow = c(2, 4))
for (p in ps) {
for (s in ss) {
set.seed(42)
x = rnorm(n, 0, 2)
y = x + rnorm(n, 0, s)
set.seed(NULL)
X = cbind(x, y)
X = scale(X, scale = F)
mx = max(abs(X))
B = randperm(X, k = 2, p = p, dist = 'unif')
m = svdpca(B, 2)
mo = svdpca(X, 2)
show(m)
show(mo)
B = apply(B, 2, function(x){ mx * x/sqrt(sum(x^2))})
plot(X, col = '#f0f0f0', pch = 1, xlim = c(-1, 1)*mx, ylim = c(-1, 1)*mx, main = sprintf('s = %.1f, p = %d', s, p))
grid()
points(B, col = 'blue', pch = 16)
lines(c(-mo[1, 1], mo[1, 1])*10, c(-mo[2, 1], mo[2, 1])*10, col = 'darkgray', lty = 1)
lines(c(-mo[1, 2], mo[1, 2])*10, c(-mo[2, 2], mo[2, 2])*10, col = 'darkgray', lty = 1)
lines(c(-m[1, 1], m[1, 1])*10, c(-m[2, 1], m[2, 1])*10, col = 'blue', lty = 3)
lines(c(-m[1, 2], m[1, 2])*10, c(-m[2, 2], m[2, 2])*10, col = 'blue', lty = 3)
}
}
B
# 0. functions ----
randperm = function(X, k = NULL, niter = 0, p = 0, dist = 'unif') {
nrows = nrow(X)
ncols = ncol(X)
if (is.null(k))
k = ncols
l = k + p
if (dist == 'unif')
Y = X %*% matrix(runif(ncols * l, -1, 1), ncols, l)
else
Y = X %*% matrix(rnorm(ncols * l), ncols, l)
Q = qr.Q(qr(Y))
if (niter > 0) {
for (i in 1:niter) {
Y = t(X) %*% Q
Q = qr.Q(qr(Y))
Y = X %*% Q
Q = qr.Q(qr(Y))
}
}
B = crossprod(Q, X)
B
}
svdpca = function(X, ncomp) {
P = svd(X)$v
}
nipalspca = function(X, ncomp) {
}
eigpca = function(X, ncomp) {
}
svdinvpca = function(X, ncomp) {
}
# 1. Simulated data (Figure 1) ----
#set.seed(42)
ss = c(0.5, 1, 1.5, 2)
ps = c(0, 5)
n = 10000
# points are not scaled
par(mfrow = c(2, 4))
for (p in ps) {
for (s in ss) {
set.seed(42)
x = rnorm(n, 0, 2)
y = x + rnorm(n, 0, s)
set.seed(NULL)
X = cbind(x, y)
X = scale(X, scale = F)
B = randperm(X, k = 2, p = p, dist = 'norm')
m = svdpca(B, 2)
mx = max(abs(B))
plot(X, col = '#f0f0f0', pch = 1, xlim = c(-1, 1)*mx, ylim = c(-1, 1)*mx, main = sprintf('s = %.1f, p = %d', s, p))
grid()
points(B, col = 'blue', pch = 16)
lines(c(-m[1, 1], m[1, 1])*10, c(-m[2, 1], m[2, 1])*10, col = 'blue', lty = 3)
lines(c(-m[1, 2], m[1, 2])*10, c(-m[2, 2], m[2, 2])*10, col = 'blue', lty = 3)
}
}
# points are scaled
par(mfrow = c(2, 4))
for (p in ps) {
for (s in ss) {
set.seed(42)
x = rnorm(n, 0, 2)
y = x + rnorm(n, 0, s)
set.seed(NULL)
X = cbind(x, y)
X = scale(X, scale = F)
mx = max(abs(X))
B = randperm(X, k = 2, p = p, dist = 'unif')
m = svdpca(B, 2)
mo = svdpca(X, 2)
show(m)
show(mo)
B = apply(B, 2, function(x){ mx * x/sqrt(sum(x^2))})
plot(X, col = '#f0f0f0', pch = 1, xlim = c(-1, 1)*mx, ylim = c(-1, 1)*mx, main = sprintf('s = %.1f, p = %d', s, p))
grid()
points(B, col = 'blue', pch = 16)
lines(c(-mo[1, 1], mo[1, 1])*10, c(-mo[2, 1], mo[2, 1])*10, col = 'darkgray', lty = 1)
lines(c(-mo[1, 2], mo[1, 2])*10, c(-mo[2, 2], mo[2, 2])*10, col = 'darkgray', lty = 1)
lines(c(-m[1, 1], m[1, 1])*10, c(-m[2, 1], m[2, 1])*10, col = 'blue', lty = 3)
lines(c(-m[1, 2], m[1, 2])*10, c(-m[2, 2], m[2, 2])*10, col = 'blue', lty = 3)
}
}
# 0. functions ----
randperm = function(X, k = NULL, niter = 0, p = 0, dist = 'unif') {
nrows = nrow(X)
ncols = ncol(X)
if (is.null(k))
k = ncols
l = k + p
if (dist == 'unif')
Y = X %*% matrix(runif(ncols * l, -1, 1), ncols, l)
else
Y = X %*% matrix(rnorm(ncols * l), ncols, l)
Q = qr.Q(qr(Y))
if (niter > 0) {
for (i in 1:niter) {
Y = t(X) %*% Q
Q = qr.Q(qr(Y))
Y = X %*% Q
Q = qr.Q(qr(Y))
}
}
B = crossprod(Q, X)
B
}
svdpca = function(X, ncomp) {
P = svd(X)$v
}
nipalspca = function(X, ncomp) {
}
eigpca = function(X, ncomp) {
}
svdinvpca = function(X, ncomp) {
}
# 1. Simulated data (Figure 1) ----
#set.seed(42)
ss = c(0.5, 1, 1.5, 2)
ps = c(0, 5)
n = 10000
# points are not scaled
par(mfrow = c(2, 4))
for (p in ps) {
for (s in ss) {
set.seed(42)
x = rnorm(n, 0, 2)
y = x + rnorm(n, 0, s)
set.seed(NULL)
X = cbind(x, y)
X = scale(X, scale = F)
B = randperm(X, k = 2, p = p, dist = 'norm')
m = svdpca(B, 2)
mx = max(abs(B))
plot(X, col = '#f0f0f0', pch = 1, xlim = c(-1, 1)*mx, ylim = c(-1, 1)*mx, main = sprintf('s = %.1f, p = %d', s, p))
grid()
points(B, col = 'blue', pch = 16)
lines(c(-m[1, 1], m[1, 1])*10, c(-m[2, 1], m[2, 1])*10, col = 'blue', lty = 3)
lines(c(-m[1, 2], m[1, 2])*10, c(-m[2, 2], m[2, 2])*10, col = 'blue', lty = 3)
}
}
# points are scaled
par(mfrow = c(2, 4))
for (p in ps) {
for (s in ss) {
set.seed(42)
x = rnorm(n, 0, 2)
y = x + rnorm(n, 0, s)
set.seed(NULL)
X = cbind(x, y)
X = scale(X, scale = F)
mx = max(abs(X))
B = randperm(X, k = 2, p = p, dist = 'unif')
m = svdpca(B, 2)
mo = svdpca(X, 2)
show(m)
show(mo)
B = apply(B, 2, function(x){ mx * x/sqrt(sum(x^2))})
plot(X, col = '#f0f0f0', pch = 1, xlim = c(-1, 1)*mx, ylim = c(-1, 1)*mx, main = sprintf('s = %.1f, p = %d', s, p))
grid()
points(B, col = 'blue', pch = 16)
lines(c(-mo[1, 1], mo[1, 1])*10, c(-mo[2, 1], mo[2, 1])*10, col = 'darkgray', lty = 1)
lines(c(-mo[1, 2], mo[1, 2])*10, c(-mo[2, 2], mo[2, 2])*10, col = 'darkgray', lty = 1)
lines(c(-m[1, 1], m[1, 1])*10, c(-m[2, 1], m[2, 1])*10, col = 'blue', lty = 3)
lines(c(-m[1, 2], m[1, 2])*10, c(-m[2, 2], m[2, 2])*10, col = 'blue', lty = 3)
}
}
shiny::runApp('Documents/Teaching/Courses/Applied statistic/Shiny apps/statapps/B201b')
runApp('Documents/Teaching/Courses/Applied statistic/Shiny apps/statapps/B201b')
runApp('Documents/Teaching/Courses/Applied statistic/Shiny apps/statapps/B201b')
runApp('Documents/Teaching/Courses/Applied statistic/Shiny apps/statapps/B201b')
runApp('Documents/Teaching/Courses/Applied statistic/Shiny apps/statapps/B201b')
runApp('Documents/Teaching/Courses/Applied statistic/Shiny apps/statapps/B201b')
runApp('Documents/Teaching/Courses/Applied statistic/Shiny apps/statapps/B201b')
10.54/11
sqrt(10.54/11)
x = c(150, 160, 170, 180, 190)
y = c(45, 65, 65, 85, 95)
plot(x, y)
sum(x)
sum(y)
mean(x)
mean(y)
x = c(150, 160, 170, 180, 190)
y = c(45, 60, 65, 85, 95)
plot(x, y)
sum(x)
sum(y)
mean(x)
mean(y)
x = c(150, 160, 170, 180, 190)
y = c(45, 60, 65, 80, 95)
plot(x, y)
sum(x)
sum(y)
mean(x)
mean(y)
x = c(150, 160, 170, 180, 190)
y = c(50, 60, 65, 80, 90)
plot(x, y)
sum(x)
sum(y)
mean(x)
mean(y)
x = c(150, 160, 170, 180, 190)
y = c(50, 60, 65, 75, 90)
plot(x, y)
sum(x)
sum(y)
mean(x)
mean(y)
x = c(150, 160, 170, 180, 190)
y = c(50, 60, 65, 75, 85)
plot(x, y)
sum(x)
sum(y)
mean(x)
mean(y)
x = c(150, 160, 170, 180, 190)
y = c(45, 55, 70, 85, 95)
plot(x, y)
sum(x)
sum(y)
mean(x)
mean(y)
x - mean(x)
y- mean(y)
(x - mean(x))*(y - mean(y))
sum(x - mean(x))*(y - mean(y))
sum((x - mean(x))*(y - mean(y))
sum((x - mean(x))*(y - mean(y)))
sum((x - mean(x))*(y - mean(y)))
(x - mean(x))(x - mean(x))
(x - mean(x))*(x - mean(x))
sum((x - mean(x))*(y - mean(y)))/sum((x - mean(x))*(x - mean(x)))
sum((x - mean(x))*(x - mean(x)))
sum((x - mean(x))*(y - mean(y)))
lm(y~x)
mean(y) - mean(x) * 1.3
plot(x, y, col = 'blue')
abline(lm(y~x), col = 'red')
grid()
plot(x, y, col = 'blue', pch = 16)
abline(lm(y~x), col = 'red')
grid()
150/18
(85 - 79.17)/(87.15 - 79.17)*(9.1 - 9.0)
if
s
0.24/50
sqrt(0.0048)
sqrt(0.0048) *1.96
sqrt(0.28 * 0.72 / 50)
0.28*0.72
0.2/50
qnorm(0.005)
2.58*0.06
0.5/swrt(50)
0.5/sqrt(50)
0.1/0.07
pnorm(-1.43)
pnorm(-1.43) * 2
pnorm(-1.43)
0.22/0.07
pnorm(-2.14)
pnorm(-3.14)
pnorm(1.43)
60/144
prop.test(60, 144)
prop.test(60, 144, alternative = 'less')
prop.test(40, 144, alternative = 'less')
prop.test(10, 144, alternative = 'less')
prop.test(10, 144, p = 0.5, alternative = 'less')
prop.test(60, 144, p = 0.5, alternative = 'less')
0.5/12
z = (0.42 - 0.5)/0.042
z
pnorm(z)
0.36 * 0.64 * (1/100 + 1/100)
sqrt(0.36 * 0.64 * (1/100 + 1/100))
0.06 / 0.068
?prop.test
x = matrix(c(33, 100, 39, 100), ncol = 2)
x
prop.test(x)
x = matrix(c(33, 39, 67, 61), ncol = 2)
prop.test(x)
-0.06/0.068
pnorm(-0.88)
pnorm(-0.88)*2
0.36 * 0.64 * (1/50)
(0.33 - 0.39) / sqrt(0.36 * 0.64 * (1/50))
pnorm(-0.884)
p1 = 0.33
p2 = 0.39
z = (p1 - p2) / sqrt(p1 * (1 - p1) / 100 + p2 * (1 - p2) / 100)
z
pnorm(-0.8856149)
pnorm(-0.8856149)*2
p1 - p2
-0.06 + 1.96 * 0.068
-0.06 - 1.96 * 0.068
25*0.4
10 * 0.75 * 0.6
5 / sqrt(4.5)
10 * 0.75 * 0.6
15/40
10/60
90/40
0.375 / 1.667
0.375 / 0.1667
0.375 / 0.16
0.375 / 0.17
0.375 / 0.167
1.8*1.9/sqrt(12)
qt(0.05, 11)
qt(0.025, 11)
qt(0.05, 12)
qt(0.05, 11)
qt(0.1, 11)
qt(0.05, 11)
qt(0.05, 10)
(11.37 - 7)/(0.87/sqrt(12))
(11.37 - 10)/(0.87/sqrt(12))
(11.37 - 13)/(0.87/sqrt(12))
1.77 * 11 / 3.82
pt(-2.29)
pt(-2.29, 11)
1 - 0.0214
library(mdatools)
?pca
shiny::runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
x = c(1, 2)
any(x == 1)
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
?updateActionButton
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
bg = is.na(data)
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
230905 + 424774
640 * 1024
runApp('Documents/Developing/rpcagui')
show('ho ho ho!')
runApp('Documents/Developing/rpcagui')
422082 + 319
runApp('Documents/Developing/rpcagui')
show(which(bgpixels %in% attrs$bgpixels))
runApp('Documents/Developing/rpcagui')
source('~/Documents/Science/Publications/On process/JChem special issue/Code/methods.R', echo=TRUE)
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
?unique
runApp('Documents/Developing/rpcagui')
data = data[-bgpixels, ]
runApp('Documents/Developing/rpcagui')
runApp('Documents/Developing/rpcagui')
setwd("~/Documents/Developing/rpcagui")
runApp()
runApp()
runApp()
655041 - 1914
runApp()
655041 - 398157
source('~/Documents/Developing/rpcagui/misc.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
matplot
?matplot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
